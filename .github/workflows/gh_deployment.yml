name: GitHub Deployment

on:
  workflow_call:
    inputs:
      action:
        description: 'The action to perform on the deployment endpoint'
        required: true
        type: string
        default: 'POST'
      environment:
        description: 'The environment to deploy to'
        required: true
        type: string
        default: 'preview'
      payload:
        description: 'The payload to send to the deployment endpoint'
        required: false
        type: string
        default: '{}'
    outputs:
      response:
        description: 'The response from the GitHub API'
        value: ${{ jobs.Request-Deployment.outputs.response }}

jobs:
  Request-Deployment:
    runs-on: ubuntu-latest
    outputs:
      response: ${{ steps.github_deployment.outputs.response }}
    steps:
      - name: Call the GitHub API
        id: github_deployment
        run: |
          create_deployment=$(curl -L \
          -X ${{ inputs.action }} \
          -H 'Accept: application/vnd.github+json' \
          -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          -H 'X-GitHub-Api-Version: 2022-11-28' \
          -H 'Content-type: application/json' \
          https://api.github.com/repos/${{ github.repository }}/deployments \
          -d '{
            "ref":"${{ github.event.ref }}",
            "payload":"${{ inputs.payload }}",
            "environment":"${{ inputs.environment }}",
            "description":"${{ inputs.environment }} deployment for ${{ github.event.head_commit.message }}"
          }')
          deployment_response=$(echo $create_deployment)
          deployment_id=$(echo $deployment_response | jq -r '.id')
          echo "response=$deployment_response" >> $GITHUB_OUTPUT
          echo "Deployment API response: $deployment_response"

          if [ $deployment_id -gt 0 ]; then
            echo "Deployment ID: $deployment_id"
            echo "deployment_id=$deployment_id" >> $GITHUB_OUTPUT
            echo "Deployment ID: $deployment_id"
          fi

      - name: Update deployment status to success in GitHub
        id: deployment_status_success
        if: ${{ success() }}
        run: |
          curl -L \
          -X POST \
          -H 'Accept: application/vnd.github+json' \
          -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          -H 'X-GitHub-Api-Version: 2022-11-28' \
          -H 'Content-type: application/json' \
          https://api.github.com/repos/${{ github.repository }}/deployments/${{ steps.create_deployment.outputs.deployment_id }}/statuses \
          -d '{
            "environment":"${{ inputs.environment }}",
            "state":"success",
            "log_url":"${{ steps.vercel_deploy.outputs.log_url }}",
            "environment_url":"${{ steps.vercel_deploy.outputs.preview_url }}",
            "description":"Deployment finished successfully."
          }'

      - name: Update deployment status to failure in GitHub
        id: deployment_status_failure
        if: ${{ failure() }}
        run: |
          curl -L \
          -X POST \
          -H 'Accept: application/vnd.github+json' \
          -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          -H 'X-GitHub-Api-Version: 2022-11-28' \
          -H 'Content-type: application/json' \
          https://api.github.com/repos/${{ github.repository }}/deployments/${{ steps.create_deployment.outputs.deployment_id }}/statuses \
          -d '{
            "environment":"${{ inputs.environment }}",
            "state":"failure",
            "log_url":"${{ steps.vercel_deploy.outputs.log_url }}",
            "environment_url":"${{ steps.vercel_deploy.outputs.preview_url }}",
            "description":"Deployment failed."
          }'
