name: GitHub Actions Vercel Preview Deployment

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  workflow_call:
    inputs:
      environment:
        description: 'The environment to deploy to'
        required: true
        type: string
      cmd_flag:
        description: 'The command flag to pass to Vercel (e.g. --prod)'
        required: false
        type: string
        default: ''
    secrets:
      VERCEL_TOKEN:
        description: 'The Vercel token to use for deployments'
        required: true

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub deployment
        id: gh_deployment
        uses: altinukshini/deployment-action@releases/v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: ${{ inputs.environment }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Install Vercel CLI
        run: pnpm install --global vercel@canary

      - name: Pull Vercel Environment Information
        id: vercel_pull
        run: |
          vercel pull --yes --environment=${{ inputs.environment }} --token ${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        id: vercel_build
        run: |
          vercel build --yes --token=${{ secrets.VERCEL_TOKEN }} ${{ inputs.cmd_flag }}

      - name: Deploy Project Artifacts to Vercel
        id: vercel_deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token ${{ secrets.VERCEL_TOKEN }} ${{ inputs.cmd_flag }})
          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      - name: Update deployment status (success)
        if: success()
        uses: altinukshini/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          target_url: "https://${{ steps.vercel_deploy.outputs.url }}"
          state: "success"
          deployment_id: ${{ steps.gh_deployment.outputs.deployment_id }}

      - name: Update deployment status (failure)
        if: failure()
        uses: altinukshini/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          target_url: "https://${{ steps.vercel_deploy.outputs.url }}"
          state: "failure"
          deployment_id: ${{ steps.gh_deployment.outputs.deployment_id }}
